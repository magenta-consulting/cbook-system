<?php

/**
 * This file is part of the <name> project.
 *
 * (c) <yourname> <youremail>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Magenta\Bundle\CBookModelBundle\Entity\Media;

//use AppBundle\Event\UndefinedMethodEvent;
use Bean\Bundle\SonataMediaBundle\Doctrine\Orm\BaseMediaTrait;
use Bean\Component\CreativeWork\Model\CreativeWork;
use Bean\Component\Media\Model\MediaObjectInterface;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;

use Doctrine\ORM\Mapping as ORM;
use JMS\Serializer\Annotation as Serializer;
use Magenta\Bundle\CBookModelBundle\Entity\Media\Base\AppMedia;
use Magenta\Bundle\CBookModelBundle\Entity\Organisation\Organisation;
use Sonata\MediaBundle\Model\MediaInterface;


/**
 * This file has been generated by the Sonata EasyExtends bundle.
 *
 * @link https://sonata-project.org/bundles/easy-extends
 *
 * References :
 *   working with object : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/working-with-objects/en
 *
 * @author <yourname> <youremail>
 */

/**
 * @ORM\Entity
 * @ORM\Table(name="media__media")
 */
class Media extends CreativeWork implements MediaObjectInterface, MediaInterface {
	use BaseMediaTrait;
	
	function __construct() {
		parent::__construct();
		$this->enabled = true;
	}
	
	private $baseUrl = '/';
	private $contentUrlPrefix;
	
	/**
	 * @var int|null
	 * @ORM\Id
	 * @ORM\Column(type="integer",options={"unsigned":true})
	 * @ORM\GeneratedValue(strategy="AUTO")
	 */
	protected $id;
	
	/**
	 * @var Organisation
	 * @ORM\OneToOne(targetEntity="Magenta\Bundle\CBookModelBundle\Entity\Organisation\Organisation", inversedBy="logo")
	 * @ORM\JoinColumn(name="id_logo_organisation", referencedColumnName="id", onDelete="CASCADE")
	 */
	protected $logoOrganisation;
	
	protected $name;
	protected $context;
	protected $description;
	
	/**
	 * @var string
	 */
	protected $contentUrl;
	protected $link;
	
	/**
	 * @return string
	 */
	public function getBaseUrl(): string {
		return $this->baseUrl;
	}
	
	/**
	 * @param string $baseUrl
	 */
	public function setBaseUrl(string $baseUrl): void {
		$this->baseUrl = $baseUrl;
	}
	
	/**
	 * @return mixed
	 */
	public function getContentUrlPrefix() {
		return $this->contentUrlPrefix;
	}
	
	/**
	 * @param mixed $contentUrlPrefix
	 */
	public function setContentUrlPrefix($contentUrlPrefix): void {
		$this->contentUrlPrefix = $contentUrlPrefix;
	}
	
	/**
	 * @param mixed $link
	 */
	public function setLink($link): void {
		$this->link = $link;
	}
	
	public function getLink() {
		if(empty($this->link)) {
			if(strlen($this->contentUrlPrefix) === 1) {
				$prefix = '';
			} else {
				$prefix = $this->contentUrlPrefix;
			}
			
			$this->link = $this->getBaseUrl() . $prefix . $this->contentUrl;
		}
		
		return $this->link;
	}
	
	/**
	 * @return Organisation
	 */
	public function getLogoOrganisation() {
		return $this->logoOrganisation;
	}
	
	/**
	 * @param Organisation $logoOrganisation
	 */
	public function setLogoOrganisation($logoOrganisation) {
		$this->logoOrganisation = $logoOrganisation;
	}
	
	public function getPublicMediaUrl() {
		return 'https://product.hstatic.net/1000149700/product/cosplay-nu-thuy-thu-sexy-8_1024x1024.jpg';
	}
	
	public function getMediaExtension() {
		$ext = $this->getExtension();
		if(empty($ext)) {
			$metadata = $this->getProviderMetadata();
			if(isset($metadata['provider_name'])) {
				$ext = strtolower($metadata['provider_name']);
			}
			/**
			 *
			 * if (isset($metadata['filename'])) {
			 * $filename = $metadata['filename'];
			 * $ext = pathinfo($filename, PATHINFO_EXTENSION);
			 * }
			 */
		}
		
		return $ext;
	}
	
	public function setEnabled($enabled): void {
		parent::setEnabled($enabled);
		if($enabled === false) {
			if(($galleryItems = $this->galleryHasMedias) instanceof Collection) {
				foreach($galleryItems as $item) {
					$item->setEnabled($enabled);
				}
			}
		}
	}
	
	
	/**
	 * @return null|string
	 */
	public function getContentUrl(): ?string {
		return $this->contentUrl;
	}
	
	/**
	 * @param null|string $contentUrl
	 */
	public function setContentUrl(?string $contentUrl): void {
		$this->contentUrl = $contentUrl;
	}
}
