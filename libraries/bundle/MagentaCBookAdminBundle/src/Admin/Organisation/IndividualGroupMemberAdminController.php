<?php

namespace Magenta\Bundle\CBookAdminBundle\Admin\Organisation;


use Aws\Api\Service;
use Magenta\Bundle\CBookAdminBundle\Admin\BaseCRUDAdminController;
use Magenta\Bundle\CBookAdminBundle\Service\Organisation\OrganisationService;
use Magenta\Bundle\CBookModelBundle\Entity\Messaging\SonataNotificationMessage;
use Magenta\Bundle\CBookModelBundle\Entity\Organisation\IndividualGroup;
use Magenta\Bundle\CBookModelBundle\Entity\Organisation\IndividualMember;
use Magenta\Bundle\CBookModelBundle\Entity\Organisation\Organisation;
use Magenta\Bundle\CBookModelBundle\Entity\Person\Person;
use Magenta\Bundle\CBookModelBundle\Entity\System\DataProcessing\DPJob;
use Magenta\Bundle\CBookModelBundle\Service\ServiceContext;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;

class IndividualGroupMemberAdminController extends BaseCRUDAdminController
{
    public function updateMemberSelectionAction(Request $request, $groupId = null, $id = null, $action = null)
    {
        $manager = $this->get('doctrine.orm.default_entity_manager');
        $registry = $this->getDoctrine();
        $groupRepo = $registry->getRepository(IndividualGroup::class);
        $memberRepo = $registry->getRepository(IndividualMember::class);
        $group = $groupRepo->find($groupId);
        $member = $memberRepo->find($id);
        if ($action === 'select') {
            if (!$group->hasMember($member)) {
                $group->addMember($member);
                $manager->persist($member);
                $manager->persist($group);
                $manager->flush();
            }
        } elseif ($action === 'deselect') {
            if ($group->hasMember($member)) {
                $group->removeMember($member);
                $manager->persist($member);
                $manager->persist($group);
                $manager->flush();
            }
        }
        
        return new JsonResponse(['msg' => 'successful']);
    }
    
    public function listAction($groupId = null)
    {
        return parent::listAction(); // TODO: Change the autogenerated stub
    }
}
