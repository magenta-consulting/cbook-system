<?php

namespace Magenta\Bundle\CBookAdminBundle\Admin\Messaging;

use Aws\Api\Service;
use Magenta\Bundle\CBookAdminBundle\Admin\BaseCRUDAdminController;
use Magenta\Bundle\CBookAdminBundle\Service\Organisation\OrganisationService;
use Magenta\Bundle\CBookModelBundle\Entity\Organisation\IndividualMember;
use Magenta\Bundle\CBookModelBundle\Entity\Organisation\Organisation;
use Magenta\Bundle\CBookModelBundle\Entity\System\DataProcessing\DPJob;
use Magenta\Bundle\CBookModelBundle\Service\ServiceContext;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

class MessageAdminController extends BaseCRUDAdminController
{
    protected function redirectTo($object)
    {
        
        $request = $this->getRequest();
        
        if (null !== $request->get('btn_publish')) {
            $route = 'show';
            $url = $this->admin->generateObjectUrl($route, $object);
            return new RedirectResponse($url);
        }
        
        
        return parent::redirectTo($object);
    }
    
    public function renderWithExtraParams($view, array $parameters = [], Response $response = null)
    {
        $org = $this->get(OrganisationService::class)->getCurrentOrganisation(new ServiceContext(ServiceContext::TYPE_ADMIN_CLASS,['parent'=>$this->admin->getParent()]));
        $parameters = array_merge($parameters, [
            'subscribedMembers' => $this->getDoctrine()->getRepository(IndividualMember::class)->findHavingOrganisationSubscriptions($org->getId())]);
        return parent::renderWithExtraParams($view, $parameters, $response);
    }
    
    public function listAction()
    {
        return parent::listAction(); // TODO: Change the autogenerated stub
    }
}
