<!doctype html>
<html lang="en">
<head>

    <meta name="theme-color" content="#fff"/>

    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>CBook</title>
    <link rel="stylesheet" href="{{ asset('assets/bs/4.0.0/bootstrap.min.css') }}"/>
    <link rel="stylesheet" href="{{ asset('assets/pk2/css/paper-kit.css') }}"/>
    <link rel="stylesheet" href="{{ asset('assets/pk2/css/nucleo-icons.css') }}"/>
    <link rel="stylesheet" href="{{ asset('build/css/app.css') }}"/>
    <link rel="stylesheet"
          href="{{ asset('bundles/sonatacore/vendor/components-font-awesome/css/font-awesome.min.css') }}"/>
    <link rel="stylesheet" href="{{ asset('assets/codemirror/codemirror.min.css') }}"/>
    <link rel="stylesheet" href="{{ asset('assets/froala/2.8.4/froala_editor.pkgd.min.css') }}"/>
    <link rel="stylesheet" href="{{ asset('assets/froala/2.8.4/froala_style.min.css') }}"/>
    {% block stylesheets_book %}{% endblock %}
</head>
<body>
<div id="app">
    <div style="height: 70px"></div>
    <nav id="cbook-navbar" class="navbar navbar-expand-lg fixed-top navbar-light">
        <div class="container">
            <div class="navbar-translate">
                <div class="navbar-brand">
                    {% block nav_title %}
                        Your books on the cloud
                    {% endblock %}
                </div>
                <button class="navbar-toggler navbar-burger" type="button" data-toggle="collapse"
                        data-target="#navbarToggler" aria-expanded="false"
                        aria-label="Toggle navigation"
                        style="float: right;">
                    <span class="navbar-toggler-bar"></span>
                    <span class="navbar-toggler-bar"></span>
                    <span class="navbar-toggler-bar"></span>
                </button>
            </div>

            <div class="navbar-collapse" id="navbarToggler">
                <ul class="navbar-nav ml-auto">
                    <li class="nav-item" data-menuanchor="btn-add-to-homescreen">
                        <a class="nav-link hand-hover" rel="tooltip" title="Dashboard" data-placement="bottom" href="#" id="btn-add-to-homescreen" style="display: none;">
                            <i class="fa fa-whatsapp" aria-hidden="true"></i>
                            Install Mobile App</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link hand-hover" rel="tooltip" title="Dashboard" data-placement="bottom"
                           href="{{ path('magenta_book_index', {orgSlug:orgSlug,'accessCode': accessCode, 'employeeCode': employeeCode}) }}">
                            <i class="nc-icon nc-bullet-list-67"></i>
                            <p class="">HOME</p>
                        </a>
                    </li>
                    <li class="nav-item hand-hover">
                        <a class="nav-link" rel="tooltip" title="Employee Contacts" data-placement="bottom"
                           href="{{ path('magenta_book_contact', {orgSlug:orgSlug,'accessCode': accessCode, 'employeeCode': employeeCode}) }}"
                           routerLink="/contacts">
                            <i class="nc-icon nc-layout-11"></i>
                            <p class="">CONTACTS</p>
                        </a>
                    </li>
                    {% if member.organization.linkedToWellness is not empty and member.wellnessId is not empty and member.wellnessPin is not empty %}
                        <li class="nav-item hand-hover">
                            <a class="nav-link" rel="tooltip" title="Employee Contacts" data-placement="bottom"
                               href="{{ wellness_evoucher_base ~ '/' ~ member.wellnessPin ~ '/' ~ member.wellnessEmployeeCode }}"
                               routerLink="/contacts">
                                <i class="nc-icon nc-atom"></i>
                                <p class="">MY WELLNESS</p>
                            </a>
                        </li>
                    {% endif %}
                    <li class="nav-item hand-hover">
                        <a class="nav-link logout" rel="tooltip" title="Employee Contacts" data-placement="bottom"
                           href="{{ path('magenta_book_login',{orgSlug:orgSlug,}) }}"
                           routerLink="/contacts">
                            <i class="nc-icon nc-lock-circle-open"></i>
                            <p class="">LOGOUT</p>
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
    {% for errorMsg in app.flashes('error') %}
        <div class="alert alert-danger alert-with-icon" data-notify="container">
            <div class="container">
                <div class="alert-wrapper">
                    {#<button type="button" class="close" data-dismiss="alert" aria-label="Close">#}
                    {#<i class="nc-icon nc-simple-remove"></i>#}
                    {#</button>#}
                    <div class="message"><i class="nc-icon nc-bell-55"></i> {{ errorMsg }}</div>
                </div>
            </div>
        </div>
    {% endfor %}
    {% block body %}
        Loading...
    {% endblock %}

</div>
<div class="hiddenStuff">
    <div class="zoomHolder">
        <div data-elem="tempItem">
        </div>
    </div>
</div>
{#<script src="{{ asset('build/manifest.js') }}"></script>#}
<script src="{{ asset('build/app.js') }}"></script>
<script src="{{ asset('assets/pk2/js/paper-kit.js') }}"></script>
<script src="{{ asset('assets/froala/2.8.4/froala_editor.pkgd.min.js') }}"></script>
<script src="{{ asset('assets/pz_main/complete_guide/js/masonry.pkgd.min.js') }}"></script>


{# Pinch Zoomer #}
<style>
    .zoomHolder {
        width: 100%;
        height: auto;
        position: relative;
        overflow: hidden
    }
</style>
<link href="{{ asset('assets/pz_main/pinch_zoomer/css/pinchzoomer.min.css') }}" rel="stylesheet">
<script src="{{ asset('assets/pz_main/pinch_zoomer/js/hammer.min.js') }}" type="text/javascript"></script>
<script src="{{ asset('assets/pz_main/pinch_zoomer/js/TweenMax.min.js') }}" type="text/javascript"></script>
<script src="{{ asset('assets/pz_main/pinch_zoomer/js/jquery.pinchzoomer.min.js') }}" type="text/javascript"></script>

{# Pinch Zoomer Marker #}
<link href="{{ asset('assets/pz_main/complete_guide/css/tooltipster.bundle.min.css') }}" type="text/css"
      rel="stylesheet"/>
<script src="{{ asset('assets/pz_main/pinch_zoomer/js/tooltipster.bundle.min.js') }}" type="text/javascript"></script>

<script>
    let url = localStorage.getItem('uniqueUrl');
    if (url == undefined || url == null || url === '') {
        localStorage.setItem('uniqueUrl', '{{ path('magenta_book_index',{orgSlug:orgSlug,accessCode:accessCode,employeeCode:employeeCode}) }}');
    }
    $(document).ready(function () {
        $('.logout').click(function (e) {
            localStorage.clear();
        })

        // $('img').wrap('<div class="zoomHolder"></div>');
        // $("img").pinchzoomer({maxZoom:5,
        //     allowDrag: true,
        //     scaleMode:"smart"}, true);

    });
</script>

<script>
    {# PWA #}
    if ('serviceWorker' in navigator) {
        window.addEventListener('load', function () {
            navigator.serviceWorker.register('{{ path('magenta_book_service_worker',{'orgSlug':orgSlug}) }}').then(function (registration) {
                // Registration was successful
                console.log('ServiceWorker registration successful with scope: ', registration.scope);
            }, function (err) {
                // registration failed :(
                console.log('ServiceWorker registration failed: ', err);
            });
        });
    }
</script>
{% block javascripts_book %}{% endblock %}
<script>
    (function ($) {
        $(document).ready(function ($) {
            // https://developers.google.com/web/fundamentals/app-install-banners/
            let deferredPrompt;
            let btnAdd = document.getElementById('btn-add-to-homescreen');
            window.addEventListener('beforeinstallprompt', (e) => {
                // Prevent Chrome 67 and earlier from automatically showing the prompt
                e.preventDefault();
// Stash the event so it can be triggered later.
                deferredPrompt = e;
                // Update UI notify the user they can add to home screen
                btnAdd.style.display = 'block';
            });

            /**
             * To show the add to home screen prompt, call prompt() on the saved event from within a user gesture.
             * It will show a modal dialog, asking the user to to add your app to their home screen.
             * Then, listen for the promise returned by the userChoice property. The promise returns an object with
             * an outcome property after the prompt has shown and the user has responded to it.
             */
            btnAdd.addEventListener('click', (e) => {
                // hide our user interface that shows our A2HS button
                btnAdd.style.display = 'none';
                // Show the prompt
                deferredPrompt.prompt();
                // Wait for the user to respond to the prompt
                deferredPrompt.userChoice
                    .then((choiceResult) => {
                        if (choiceResult.outcome === 'accepted') {
                            console.log('User accepted the Wellness prompt');
                        } else {
                            console.log('User dismissed the Wellness prompt');
                        }
                        deferredPrompt = null;
                    });
            });

            /**
             * The mini-infobar is a Chrome UI component and is not controllable by the site,
             * but can be easily dismissed by the user. Once dismissed by the user,
             * it will not appear again until a sufficient amount of time has passed (currently 3 months).
             * The mini-infobar will appear when the site meets the add to home screen criteria,
             * regardless of whether you preventDefault() on the beforeinstallprompt event or not.
             */

            /**
             * To determine if the app was successfully added to the user's home screen after they accepted the prompt,
             * you can listen for the appinstalled event.
             */
            window.addEventListener('appinstalled', (evt) => {
                app.logEvent('wellness', 'installed');
            });
        });

        /* OnLoad Window */
        var init = function () {

        };
        window.onload = init;

    })(jQuery);
    (function (window, $) {
        $(function () {
            var pzItems = $("[data-elem='pzItem']"),
                tempItem = $("[data-elem='tempItem']"),
                thumbScrollerElem = $("div[data-elem='thumbScroller']").eq(0),
                thumbHolder = $("div[data-elem='thumbHolder']").eq(0),
                fullscreenThumbHolder = $("div[data-elem='fullscreenThumbHolder']").eq(0),
                thumbScroller = null,
                pz = new PinchZoomer(tempItem),
                _index = -1,
                fullscreenDiv = FullscreenElem._vars.fullscreenDiv,
                prevButton = $("<div class='prevButton'></div>"),
                nextButton = $("<div class='nextButton'></div>"),
                $zoomHolder = $('.hiddenStuff .zoomHolder');
            ;
            pz.on(PinchZoomer.FULLSCREEN_TOGGLE, function (e) {
                if (!pz.fullscreen()) {
                    pz.elem('<span></span>', false, false);
                    $zoomHolder.css('height', 'auto');
                    $zoomHolder.children('.controlHolder').hide();
                } else {
                    $zoomHolder.children('.controlHolder').show();
                }
            });


            //initTooltip();
            pzItems.detach();
            setup();

            $('img').click(function (e) {
                console.log('hey 10')
                // console.log($(this).parent().html());
                pz.elem($(this).parent().html(), false, false);
                pz.fullscreen(true);
            })

            function initTooltip(tooltipElem) {
                var trigger = Utils.isTouchDevice() ? "click" : "hover",
                    markerTooltips = tooltipElem ? $(tooltipElem).find(".tooltip").not(".tooltipstered") : $(".tooltip").not(".tooltipstered"),
                    len = markerTooltips.length;

                for (var i = 0; i < len; i++) {
                    var markerTooltip = markerTooltips.eq(i);
                    markerTooltip.attr("title", markerTooltip.data("title"));

                    var tipHanlder = new Hammer(markerTooltip.get(0));
                    tipHanlder.on('press pressup', onTipHandler);

                }

                if (Utils.browser.name == "Firefox") {
                    markerTooltips.tooltipster({trigger: "hover", theme: 'tooltipster-light'});

                }
                else {
                    markerTooltips.tooltipster({
                        trigger: 'custom',
                        triggerOpen: {mouseenter: true},
                        triggerClose: {mouseleave: true},
                        theme: 'tooltipster-light'
                    });

                }
            }

            function onTipHandler(e) {
                if (e.type == "press") {
                    $(e.target).tooltipster('open');
                }
                else {
                    $(e.target).tooltipster('close');
                }
            }

            function setIndex(val) {
                //if(val !== _index && val >= 0 && val < pzItems.length)


                if (val >= 0 && val < pzItems.length) {

                    if (val == _index) {
                        pz.fullscreen(true);
                    }
                    else {
                        _index = val;

                        var pzItem = pzItems.eq(_index);
                        //	markers = pzItem.find("*[data-elem='marker']");

                        pz.elem(pzItem, false, false);
                    }

                    pz.fullscreen(true);
                    $(".controlHolder").append(prevButton);
                    $(".controlHolder").append(nextButton);
                    initTooltip(pz.elem());

                    if (val == 0) {
                        prevButton.removeClass("on");
                        prevButton.addClass("off");
                    }
                    else {
                        prevButton.removeClass("off");
                        prevButton.addClass("on");
                    }

                    if (val == pzItems.length - 1) {
                        nextButton.removeClass("on");
                        nextButton.addClass("off");
                    }
                    else {
                        nextButton.removeClass("off");
                        nextButton.addClass("on");
                    }

                }
            }

            function setup() {
                var pzLen = pzItems.length,
                    thumbs = [];

                for (var i = 0; i < pzLen; i++) {
                    var pzItem = pzItems.eq(i),
                        gridVars = Utils.stringToObject("{" + pzItem.data("grid-options") + "}");
                    pzItem.data("parsed", false);
                    pzItem.data("obj", {});

                    if (gridVars.thumbUrl != null) {
                        var addClass = gridVars.addClass ? " " + gridVars.addClass : "",
                            gridItemDiv = $("<div class='grid-item" + addClass + "'><img src='" + gridVars.thumbUrl + "' style='width:100%; height:auto'/></div>");

                        $("#grid").append(gridItemDiv);
                        gridItemDiv.find("img").on("load", onGridImageLoad);
                        gridItemDiv.on("click", {index: i}, onGridItemClick);
                    }
                }

                prevButton.on("click", onPrev);
                nextButton.on("click", onNext);


                // $("#grid").masonry({ itemSelector: '.grid-item', columnWidth: 200, gutter:10});

            }

            function onGridImageLoad(e) {
                // $("#grid").masonry("layout");
            }

            function onGridItemClick(e) {
                var index = e.data.index;
                setIndex(index);
            }

            function onPrev() {
                setIndex(_index - 1);
            }

            function onNext() {
                setIndex(_index + 1);
            }
        });

    }(window, jQuery));
</script>
</body>
</html>
